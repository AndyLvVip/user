/*
 * This file is generated by jOOQ.
*/
package jooq.gen.tables.records;


import java.time.LocalDateTime;

import javax.annotation.Generated;

import jooq.gen.tables.User;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record12;
import org.jooq.Row12;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record12<String, String, String, String, String, String, Boolean, LocalDateTime, String, LocalDateTime, String, Integer> {

    private static final long serialVersionUID = 1481267246;

    /**
     * Setter for <code>user.id</code>.
     */
    public void getId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>user.id</code>.
     */
    public String setId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>user.username</code>.
     */
    public void getUsername(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>user.username</code>.
     */
    public String setUsername() {
        return (String) get(1);
    }

    /**
     * Setter for <code>user.password</code>.
     */
    public void getPassword(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>user.password</code>.
     */
    public String setPassword() {
        return (String) get(2);
    }

    /**
     * Setter for <code>user.phone</code>.
     */
    public void getPhone(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>user.phone</code>.
     */
    public String setPhone() {
        return (String) get(3);
    }

    /**
     * Setter for <code>user.nickname</code>.
     */
    public void getNickname(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>user.nickname</code>.
     */
    public String setNickname() {
        return (String) get(4);
    }

    /**
     * Setter for <code>user.email</code>.
     */
    public void getEmail(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>user.email</code>.
     */
    public String setEmail() {
        return (String) get(5);
    }

    /**
     * Setter for <code>user.isObsolete</code>.
     */
    public void getIsObsolete(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>user.isObsolete</code>.
     */
    public Boolean setIsObsolete() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>user.createdOn</code>.
     */
    public void getCreatedOn(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>user.createdOn</code>.
     */
    public LocalDateTime setCreatedOn() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>user.createdBy</code>.
     */
    public void getCreatedBy(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>user.createdBy</code>.
     */
    public String setCreatedBy() {
        return (String) get(8);
    }

    /**
     * Setter for <code>user.updatedOn</code>.
     */
    public void getUpdatedOn(LocalDateTime value) {
        set(9, value);
    }

    /**
     * Getter for <code>user.updatedOn</code>.
     */
    public LocalDateTime setUpdatedOn() {
        return (LocalDateTime) get(9);
    }

    /**
     * Setter for <code>user.updatedBy</code>.
     */
    public void getUpdatedBy(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>user.updatedBy</code>.
     */
    public String setUpdatedBy() {
        return (String) get(10);
    }

    /**
     * Setter for <code>user.version</code>.
     */
    public void getVersion(Integer value) {
        set(11, value);
    }

    /**
     * Getter for <code>user.version</code>.
     */
    public Integer setVersion() {
        return (Integer) get(11);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record12 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<String, String, String, String, String, String, Boolean, LocalDateTime, String, LocalDateTime, String, Integer> fieldsRow() {
        return (Row12) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row12<String, String, String, String, String, String, Boolean, LocalDateTime, String, LocalDateTime, String, Integer> valuesRow() {
        return (Row12) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return User.USER.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return User.USER.USERNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return User.USER.PASSWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field4() {
        return User.USER.PHONE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field5() {
        return User.USER.NICKNAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return User.USER.EMAIL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Boolean> field7() {
        return User.USER.ISOBSOLETE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field8() {
        return User.USER.CREATEDON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field9() {
        return User.USER.CREATEDBY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<LocalDateTime> field10() {
        return User.USER.UPDATEDON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field11() {
        return User.USER.UPDATEDBY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field12() {
        return User.USER.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return setId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return setUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return setPassword();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component4() {
        return setPhone();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component5() {
        return setNickname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return setEmail();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean component7() {
        return setIsObsolete();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component8() {
        return setCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component9() {
        return setCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime component10() {
        return setUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component11() {
        return setUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component12() {
        return setVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return setId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return setUsername();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return setPassword();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value4() {
        return setPhone();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value5() {
        return setNickname();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return setEmail();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Boolean value7() {
        return setIsObsolete();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value8() {
        return setCreatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value9() {
        return setCreatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public LocalDateTime value10() {
        return setUpdatedOn();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value11() {
        return setUpdatedBy();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value12() {
        return setVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value1(String value) {
        getId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value2(String value) {
        getUsername(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value3(String value) {
        getPassword(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value4(String value) {
        getPhone(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value5(String value) {
        getNickname(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value6(String value) {
        getEmail(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value7(Boolean value) {
        getIsObsolete(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value8(LocalDateTime value) {
        getCreatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value9(String value) {
        getCreatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value10(LocalDateTime value) {
        getUpdatedOn(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value11(String value) {
        getUpdatedBy(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord value12(Integer value) {
        getVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRecord values(String value1, String value2, String value3, String value4, String value5, String value6, Boolean value7, LocalDateTime value8, String value9, LocalDateTime value10, String value11, Integer value12) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(String id, String username, String password, String phone, String nickname, String email, Boolean isobsolete, LocalDateTime createdon, String createdby, LocalDateTime updatedon, String updatedby, Integer version) {
        super(User.USER);

        set(0, id);
        set(1, username);
        set(2, password);
        set(3, phone);
        set(4, nickname);
        set(5, email);
        set(6, isobsolete);
        set(7, createdon);
        set(8, createdby);
        set(9, updatedon);
        set(10, updatedby);
        set(11, version);
    }
}
